# from PIL import *

import numpy
import cv2

import string
import array

IMAGE_PROCESS_URLS = {'1':'/general_process', '2':'/special_process'}

class ImageProcessStruct:
    img_proc_op = ''    
    img_data = []
    img_size = ()
    img_proc_arg = {}
    

class ImageProcessModule():
    def __init__(self):
        pass

    def save_image(self, imagedata, size, filename):
        pass

    def _convert_to_image(self, data_line, size_line):
        # convert to image that can be processed by opencv
        # TODO: using multiprocessing

        
        # debug_data_file = open('img_data_file.txt', 'w')
        # debug_data_file.write(data_line)
        # debug_data_file.close()
        
        # debug_size_file = open('img_size_file.txt', 'w')
        # debug_size_file.write(size_line)
        # debug_size_file.close()

        # print data_line
        # print '\n'
        # print size_line
        # seperate the data and the size

        # print 'len(data_line): %s' % len(data_line)
        # print size_line
        
        img_data_key_str, img_data_value_str = data_line.split('=')
        img_size_key_str, img_size_value_str = size_line.split('=')
            
        # convert to raw rgb data
        # version 0.1
        # split image data according to comma char
        img_data_str = numpy.array(img_data_value_str.split(','))
        print 'length of img_data_str is %d' % len(img_data_str)
        img_data = img_data_str.astype(numpy.uint8)
        #for i in range(40001):
        #    print '%u' % img_data[i]
        

        img_size_info = img_size_value_str.split(',')
        img_width = int(img_size_info[0][1:])
        img_height = int(img_size_info[1][:-1])

        # debug
        # print img_data

        img_data_len = img_data.size

        print 'img_data_len: %d' % img_data_len

        # print str(img_width) + '\n'
        # print str(img_height) + '\n'
        # print str(img_width * img_height * 4) + '\n'
        
        dst_img = []
        if img_width * img_height == img_data_len:
            # grayscale image
            img_data = img_data.reshape(img_width, img_height)
        elif img_width * img_height * 3 == img_data_len:
            # RGB image
            img_data = img_data.reshape(img_width, img_height, 3)
        elif img_width * img_height * 4 == img_data_len:
            
            # RGBA image
            img_data = img_data.reshape(img_width, img_height, 4)            
        else:
            print 'acquired img_data error!'
            img_data = []
        return img_data
    
    def handle(self, req_path, req_data):
        if req_path == IMAGE_PROCESS_URLS['1']:
            # general_process
            # print 'general_process!'
            # req_data, must be in an ImageProcessStruct Structure
            # rstrip_post_data = 
            # split_post_data = req_data.readlines(); # rstrip_post_data.splitlines('\r\n')

            # print 'post_data is:\n'
            # test split_post_data

            # for line in req_data:
            #     print line

            # debug
            temp_image_file = open('temp_image.txt', 'w')
            temp_image_file.writelines(req_data)
            temp_image_file.close()
            
            #for line in req_data:
            #     temp_image_file.write(line)

            img_data_pair = array.array('c')
            img_size_pair = ''
            for line in req_data:
                if line.find('IMG_DATA') == 0:
                    img_data_pair = line
                if line.find('IMG_SIZE') == 0:
                    img_size_pair = line

            img_data = self._convert_to_image(img_data_pair, img_size_pair)
            if img_data == []:
                return 200, ['Image data error', ]

            # do the job
            gray_scale_img = cv2.cvtColor(img_data, cv2.COLOR_BGR2GRAY)
            
            # print temp_line
            return 200, [gray_scale_img.data, ]
        elif req_path == IMAGE_PROCESS_URLS['2']:
            return 404, ['Not implemented!', ]
        else:
            return 404, ['The page requested is not found.', ]
